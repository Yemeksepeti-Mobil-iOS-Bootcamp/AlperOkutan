import UIKit


/*
 1) If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these
 multiples is 23.
 
 Find the sum of all the multiples of 3 or 5 below 1000.
 */
var total = 0

for i in 1...999 {
    if i % 3 == 0 || i % 5 == 0 {
        total += i
    }
}

print(total)


/*
 2) Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
 the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the
 even-valued terms.
 */
var limit = 4000000
var sum = 0
var a = 1
var b = 1
while b < limit {
    if b % 2 == 0 { sum += b }
    let h = a + b
    a = b
    b = h
}
print(sum)


/*
 3) The prime factors of 13195 are 5, 7, 13 and 29.
 
 What is the largest prime factor of the number 600851475143 ?
 */
class factor {
    var arrayFactors: [Int]
    
    init () {
        self.arrayFactors = []
    }

    func findFactors(number:Int) -> Int {
        
        // start with 2, smallest prime factor
        
        var i = 2
        var nextNumber: Int = number
        
        while nextNumber > 1 {
            if nextNumber % i == 0 {
                arrayFactors.append(i)
                nextNumber = Int(nextNumber / i)
                while nextNumber % i == 0 {
                    nextNumber = Int(nextNumber / i)
                }
                print("factor \(i) leaves number \(nextNumber)")

            }
            i += 1
        }
        
        return arrayFactors.removeLast()
    }
}

let myFactor = factor()
let number = 600851475143
print("largest prime factor of \(number) is \(myFactor.findFactors(number: number))")


/*
 4) A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit
 numbers is 9009 = 91 Ã— 99.
 
 Find the largest palindrome made from the product of two 3-digit numbers.
 */
func largestPalindromeProduct() -> Int{
    
    var found = 0
    var max = 0

    for firstNum in (100...999).reversed() {
        for secondNum in (100...999).reversed() {
            
            found = firstNum * secondNum
            
            if (max < found) {
                if isPalindrom(found) {
                    max = found
                    break
                }
            }
        }
    }
    return max
}

func isPalindrom(_ number : Int) -> Bool {
    
    let temp = Array(String(number))
    
    return temp == temp.reversed()
}

print(largestPalindromeProduct())


/*
 5) 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
 
 What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
 */

func smallestMultiple() {
    var num = 2520
    var found = false

    while found == false {
        var counter = 0
        
        for i in 2...20 {
            if number % i == 0 {
                counter += 1
            } else {
                print("\(number) is not the number")
                break;
            }
        }
        if counter == 19 {
            found = true;
        } else {
            num += 2
        }
    }
    
    print("\(num) is the number!!")
}
